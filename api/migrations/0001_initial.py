# Generated by Django 6.0 on 2025-10-23 15:26

import cloudinary_storage.storage
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('firebase_uid', models.CharField(blank=True, db_index=True, max_length=128, null=True, unique=True)),
                ('provider', models.CharField(choices=[('email', 'Email'), ('google', 'Google'), ('github', 'GitHub')], default='email', max_length=50)),
                ('avatar_url', models.URLField(blank=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='api_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='api_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('name', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(resource_type='raw'), upload_to='documents/')),
                ('file_url', models.URLField(max_length=500)),
                ('public_id', models.CharField(blank=True, max_length=500)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'DOC'), ('docx', 'DOCX'), ('txt', 'TXT'), ('ppt', 'PPT'), ('pptx', 'PPTX'), ('zip', 'ZIP'), ('jpg', 'JPG'), ('jpeg', 'JPEG'), ('png', 'PNG'), ('gif', 'GIF'), ('webp', 'WEBP'), ('xls', 'XLS'), ('xlsx', 'XLSX'), ('csv', 'CSV')], max_length=500)),
                ('college', models.CharField(default='General', max_length=500)),
                ('branch', models.CharField(default='Default Branch', max_length=500)),
                ('year', models.CharField(blank=True, max_length=500)),
                ('semester', models.CharField(blank=True, max_length=500)),
                ('subject', models.CharField(blank=True, max_length=500)),
                ('resource_type', models.CharField(blank=True, max_length=500)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'api_document',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('points', models.IntegerField(default=0)),
                ('solved_count', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('last_solve_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminProblem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('statement', models.TextField()),
                ('input_format', models.TextField(blank=True, null=True)),
                ('output_format', models.TextField(blank=True, null=True)),
                ('constraints', models.JSONField(blank=True, default=list)),
                ('examples', models.JSONField(blank=True, default=list)),
                ('test_cases', models.JSONField(blank=True, default=list)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=10)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempts', models.IntegerField(default=0)),
                ('solves', models.IntegerField(default=0)),
                ('hardness_score', models.IntegerField(blank=True, default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AIProblem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('statement', models.TextField()),
                ('input_format', models.TextField(blank=True, null=True)),
                ('output_format', models.TextField(blank=True, null=True)),
                ('constraints', models.JSONField(blank=True, default=list)),
                ('examples', models.JSONField(blank=True, default=list)),
                ('test_cases', models.JSONField(blank=True, default=list)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=10)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempts', models.IntegerField(default=0)),
                ('solves', models.IntegerField(default=0)),
                ('hardness_score', models.IntegerField(blank=True, default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('coding', 'Coding'), ('design', 'Design'), ('research', 'Research'), ('entrepreneurship', 'Entrepreneurship'), ('other', 'Other')], default='coding', max_length=20)),
                ('is_public', models.BooleanField(default=True)),
                ('tags', models.JSONField(default=list)),
                ('college', models.CharField(max_length=200)),
                ('mission_statement', models.TextField()),
                ('core_focus', models.JSONField(default=list)),
                ('social_links', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='administered_clubs', to=settings.AUTH_USER_MODEL)),
                ('faculty_advisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advised_clubs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'clubs',
            },
        ),
        migrations.CreateModel(
            name='ClubEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('workshop', 'Workshop'), ('talk', 'Talk'), ('coding_session', 'Coding Session'), ('project', 'Project'), ('guest_talk', 'Guest Talk'), ('hackathon', 'Hackathon'), ('social', 'Social')], default='workshop', max_length=20)),
                ('date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(blank=True, related_name='attended_events', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.club')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('registered_attendees', models.ManyToManyField(blank=True, related_name='registered_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'club_events',
            },
        ),
        migrations.CreateModel(
            name='ClubMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('president', 'President'), ('vice_president', 'Vice President'), ('technical_head', 'Technical Head'), ('marketing_head', 'Marketing Head'), ('treasurer', 'Treasurer'), ('event_coordinator', 'Event Coordinator'), ('member', 'Member')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.club')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'club_members',
            },
        ),
        migrations.AddField(
            model_name='club',
            name='members',
            field=models.ManyToManyField(related_name='clubs', through='api.ClubMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ClubPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('tags', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_posts', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.club')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'club_posts',
            },
        ),
        migrations.CreateModel(
            name='ClubResources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('document', 'Document'), ('template', 'Template'), ('guide', 'Guide'), ('recording', 'Recording')], default='document', max_length=20)),
                ('url', models.URLField()),
                ('downloads', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='api.club')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_resources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'club_resources',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('is_public', models.BooleanField(default=True)),
                ('topics', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('members', models.ManyToManyField(related_name='communities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'communities',
            },
        ),
        migrations.CreateModel(
            name='CommunityProblem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('statement', models.TextField()),
                ('input_format', models.TextField(blank=True, null=True)),
                ('output_format', models.TextField(blank=True, null=True)),
                ('constraints', models.JSONField(blank=True, default=list)),
                ('examples', models.JSONField(blank=True, default=list)),
                ('test_cases', models.JSONField(blank=True, default=list)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=10)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempts', models.IntegerField(default=0)),
                ('solves', models.IntegerField(default=0)),
                ('hardness_score', models.IntegerField(blank=True, default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JWTToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jti', models.CharField(db_index=True, help_text='JWT Token ID', max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(db_index=True)),
                ('is_blacklisted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jwt_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_jwt_token',
            },
        ),
        migrations.CreateModel(
            name='MentorSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('duration', models.IntegerField(help_text='Duration in minutes')),
                ('notes', models.TextField()),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentee_sessions', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mentor_sessions',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('tech_stack', models.JSONField(default=list)),
                ('skills_needed', models.JSONField(default=list)),
                ('is_public', models.BooleanField(default=True)),
                ('github_repo', models.URLField(blank=True, null=True)),
                ('demo_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.club')),
                ('members', models.ManyToManyField(related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'projects',
            },
        ),
        migrations.CreateModel(
            name='ProjectGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('skills', models.JSONField(default=list)),
                ('looking_for', models.JSONField(default=list)),
                ('max_members', models.IntegerField(default=4)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('members', models.ManyToManyField(related_name='project_groups', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='api.project')),
            ],
            options={
                'db_table': 'project_groups',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(blank=True, null=True)),
                ('code', models.TextField()),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Wrong Answer', 'Wrong Answer'), ('Runtime Error', 'Runtime Error'), ('Time Limit Exceeded', 'Time Limit Exceeded'), ('Error', 'Error'), ('Pending', 'Pending')], default='Pending', max_length=20)),
                ('runtime_ms', models.IntegerField(blank=True, null=True)),
                ('memory_kb', models.IntegerField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, default='', max_length=500)),
                ('website', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, default='', max_length=100)),
                ('github_username', models.CharField(blank=True, max_length=39)),
                ('twitter_username', models.CharField(blank=True, max_length=15)),
                ('linkedin_url', models.URLField(blank=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('theme_preference', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_user_profile',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['firebase_uid'], name='auth_user_firebas_7d7354_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['provider'], name='auth_user_provide_d82284_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined'], name='auth_user_date_jo_f1a394_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clubmember',
            unique_together={('club', 'user')},
        ),
        migrations.AddIndex(
            model_name='jwttoken',
            index=models.Index(fields=['jti'], name='auth_jwt_to_jti_f96dd9_idx'),
        ),
        migrations.AddIndex(
            model_name='jwttoken',
            index=models.Index(fields=['expires_at'], name='auth_jwt_to_expires_a85956_idx'),
        ),
        migrations.AddIndex(
            model_name='jwttoken',
            index=models.Index(fields=['is_blacklisted'], name='auth_jwt_to_is_blac_d87e2a_idx'),
        ),
    ]
